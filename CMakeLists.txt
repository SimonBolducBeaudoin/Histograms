# Should be compatible with unix and 
# compilation on windows using cygwin and crosscompiling using mingw
# also don't forget to edit config.cmake for machine specific stuff     

set(PROJECT_NAME Histograms)                    
set(LIB_NAME histograms)                        
set(EXTERNAL_INCLUDES ../Multi_array/src ../Omp_extra/src ../Moments_cumulants/src ../Math_extra/src ./src) 
set(COMPILE_OPTIONS_ADD -fopenmp -fopenmp-simd )  
set(LINKS -fopenmp -fopenmp-simd)
s#eparate_arguments(EXTERNAL_INCLUDES)           # Turned into a list a list 
#separate_arguments(COMPILE_OPTIONS_ADD)    
#separate_arguments(LINKS)    

cmake_minimum_required(VERSION 3.15)
project(${PROJECT_NAME} VERSION 1.0.0) # Needs to be ontop

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose Release or Debug" FORCE)
endif()

file(MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/build)
file(MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/obj)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED True)

option(BUILD_SHARED_LIBS "Build using shared libraries" ON)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/obj)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/obj)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/obj)

file(GLOB SRC_FILES "src/*.cpp")

add_compile_options(-Wall -O3 -march=native )
add_compile_options(${COMPILE_OPTIONS_ADD})

add_library(${LIB_NAME} ${SRC_FILES})
include(config.cmake) # sets IS_MINGW,PY_INCL,SHARED_LIB_PREFIX,SHARED_LIB_SUFFIX and updates LINKS

#compile includes
include_directories(${PY_INCL})           # pybind11 includes
include_directories(${EXTERNAL_INCLUDES})

#linking 
set_target_properties(${LIB_NAME} PROPERTIES PREFIX "${SHARED_LIB_PREFIX}")
set_target_properties(${LIB_NAME} PROPERTIES SUFFIX ${SHARED_LIB_SUFFIX})
target_link_libraries(${LIB_NAME} ${LINKS})


